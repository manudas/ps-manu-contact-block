<?php

	class AdminCallmePleaseCommentsController extends ModuleAdminController{

	
		public function __construct(){		
			$this->bootstrap = true;
			// $this->colorOnBackground = true;
			$this->addRowAction('edit'); //add an edit button
			$this->addRowAction('delete'); //add a delete button
			$this->bulk_actions = array('delete' => array('text' => $this->l('Delete selected'), 'confirm' => $this->l('Delete selected items?')));
			$this->explicitSelect = true;
			$this->context = Context::getContext();
			$this->id_lang = $this->context->language->id;
		 
			$this->default_form_language = $this->context->language->id;
			$this->table = 'callme_please_comments'; //define the main table: auto aliased to a
			$this->className = 'callmepleasecommentsdata'; //define the module entity. name de la clase q contiene la definition de base de datos
			$this->identifier = "comment_ID"; //the primary key
			//die(var_dump($this->id));
			//then define select part of the query
			$langID = $this->context->language->id;
			
/*			
			//$this->_select = 'a.ID_RATE,a.NAME';
			
			$this->_select = 'CASE IFNULL(cmpd.ban_method, "sin") 
										when "sin" then "Sin baneo"
										when "s" then "Baneado por sesión"
										when "i" then "Baneado por ip"
									END as BANEO';
*/			
			
		/*
				al.name
				';
		*/ 
			//join to an existing table if you need some extra informations

			/*
			 // a is an auto alias of callme_please table generated by prestashop
			$this->_join= '
				INNER JOIN `'._DB_PREFIX_.'callme_please_data` cmpd ON (cmpd.`id_data` = a.`id_data`)';
				*/
			
/*			
			$this->_where = '
				AND cl.`id_lang` ="'. $langID.'" AND cat.`id_lang` ="'. $langID.'"';
			//and define the field to display in the admin table
*/			
			
			
			parent::__construct();
		}
		
		
		private function initList()
		{
			
			/*
			  "CREATE TABLE `"._DB_PREFIX_."callme_please_comments` ("
			  	."`comment_ID` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,"
			  	."`customer_phone` varchar(20) CHARACTER SET utf8,"
			  	."`session_id` varchar(40) CHARACTER SET utf8,"
			  	."`ip` varchar(46) CHARACTER SET utf8,"
			  	."`comment` varchar(4096) CHARACTER SET utf8 NOT NULL,"
			  .") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
			*/
			$this->fields_list = array(
				'comment_ID' => array(
					'title' => $this->l('Id comentario'),
					'width' => 140,
					'type' => 'text',
					'filter_key' => 'a!comment_ID'
				),
				'customer_phone' => array(
					'title' => $this->l('Phone'),
					'width' => 140,
					'type' => 'text',
					'filter_key' => 'a!customer_phone'
				),
				'session_id' => array(
					'title' => $this->l('Session ID'),
					'width' => 140,
					'type' => 'text',
					'filter_key' => 'a!session_id'
				),
				'ip' => array(
					'title' => $this->l('IP'),
					'width' => 140,
					'type' => 'text',
					'filter_key' => 'a!ip'
				),
				'comment' => array(
					'title' => $this->l('Comentario'),
					'width' => 140,
					'type' => 'text',
					'filter_key' => 'a!comment'
				)
			);
			
			
			/*
			$helper = new HelperList();
			 
			$helper->shopLinkType = '';
			 
			// $helper->simple_header = true;
			 
			// Actions to be displayed in the "Actions" column
			$helper->actions = array('edit', 'delete', 'view');
			 
			$helper->identifier = 'id_menu';
			$helper->show_toolbar = true;
			$helper->title = 'CMS Menu Link';
			$helper->table = _DB_PREFIX_.'cmshomemenumanu';
			
			$helper->simple_header = false;
			
			$helper->token = Tools::getAdminTokenLite('AdminModules');
			$helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
			return $helper;
			*/
		}
		
		
		public function renderList(){
			
			
			$this->initList();
						
			if (Tools::isSubmit($this->table."Orderby")){
				$this->_orderBy = Tools::getValue($this->table."Orderby");
				$this->_orderWay = Tools::getValue($this->table."Orderway");
			}			
				
								
			if (Tools::isSubmit('submitFilter'))
			{
				$whereAdition = '';
				foreach ($this->fields_list AS $field => $t)
				{
					if (isset($t['filter_key']))
						$field = $t['filter_key'];
					if ($val = Tools::getValue($this->table.'Filter_'.$field))
					{
						if(!is_array($val) && !empty($val)){
							$replacedCharField = str_replace('!','.',$field);
							$whereAdition .= $whereAdition ?  " AND LOWER(".$replacedCharField.") like LOWER('%".$val."%')" : " LOWER(".$replacedCharField.") like LOWER('%".$val."%')";
							//$whereAdition .= $whereAdition ?  " AND `".$field."` like '%".$val."%'" : " `".$field."` like '%".$val."%'";
						}
						elseif(is_array($val) && !empty($val))
						{
							$tmp = '';
							$replacedCharField = str_replace('!','.',$field);
							if ((count($val) == 2) && !empty($val[0]) && !empty($val[1])){ // Â¿Filtro es entre dos fechas ?
								$tmp = " ".$replacedCharField." BETWEEN '".$val[0]."' AND '".$val[1]."'";
								// $tmp = " `".$field."` BETWEEN '".$val[0]."' AND '".$val[1]."'";
							}
							else { // Â¿otro tipo de filtro ?
								foreach($val as $v)
									if(!empty($v))
										$tmp .= $tmp ?  " OR ".$replacedCharField." like '%".$v."%'" : " ".$replacedCharField." like '%".$v."%'";
										// $tmp .= $tmp ?  " OR `".$field."` like '%".$v."%'" : " `".$field."` like '%".$v."%'";									
							}
							if(Tools::strlen($tmp))
							{
							
								$tmp = $whereAdition ? " AND (".$tmp.")" : "(".$tmp.")";
								$whereAdition .= $tmp;

							}
						}
					}
				}

				$this->_where .= $whereAdition ? " AND ".$whereAdition : "";
				

			}						
			return parent::renderList();
		}
				
		public function renderForm(){
		

			
			$this->fields_form = array(

					'legend' => array(

						'title' => $this->l('Comentario del cliente'),

						'icon' => 'icon-cogs'

					),

					'description' => $this->l('Aqui vera los comentarios de un cliente asociados a un telefono, una ip o una sesion').'<br/><br/>',

					'input' => array(

						array(

							'type' => 'text',

							'label' => $this->l('Phone'),

							'name' => 'customer_phone',

							'desc' => $this->l('Este es el telefono al que el cliente solicito la llamada'),
								
							'readonly' => true,

						),
						 
						array(

							'type' => 'text',

							'label' => $this->l('IP'),

							'name' => 'ip',

							'desc' => $this->l('La ip desde que se realizÃ³ esta solicitud'),
								
							'readonly' => true,

						),
						
						array(

							'type' => 'text',

							'label' => $this->l('Sesion'),

							'name' => 'session_id',

							'desc' => $this->l('ID de sesion del cliente'),
								
							'readonly' => true,

						),							
						array(
						
							'type' => 'textarea',
							
							'label' => $this->l('Comentarios'),
							
							'name' => 'comment',
							
							'desc' => $this->l('Comentario acerca del cliente')
							
						),
					),

					'submit' => array(

						'title' => $this->l('Save'),
					)

				// ),
			);
			
			$this->fields_form['submit'] = array(
				'title' => $this->l('Guardar'),
				'class' => 'button'
			);
			
			if (!($MyModuleObject = $this->loadObject(true)))
				return;
			//populate the field with good values if we are in an edition
			foreach($this->fields_form["input"] as $inputfield){
				$this->fields_value[$inputfield["name"]] = $MyModuleObject->$inputfield["name"];
			}
			$form = parent::renderForm();

			return $form;
				
			
	
		}
		
		public function postProcess()
		{
			

			/*
			 "CREATE TABLE `"._DB_PREFIX_."callme_please_comments` ("
			 ."`comment_ID` int(11) NOT NULL PRIMARY KEY AUTO_INCREMENT,"
			 ."`customer_phone` varchar(20) CHARACTER SET utf8,"
			 ."`session_id` varchar(40) CHARACTER SET utf8,"
			 ."`ip` varchar(46) CHARACTER SET utf8,"
			 ."`comment` varchar(4096) CHARACTER SET utf8 NOT NULL,"
			 .") ENGINE=InnoDB DEFAULT CHARSET=utf8;";
			 */
			
			
			$comment_ID = Tools::getValue('comment_ID');
				
			$customer_phone = Tools::getValue('customer_phone');

			$session_id = Tools::getValue('session_id');
			
			$ip = Tools::getValue('ip');
			
			$comment = Tools::getValue('comment');
			
			// $cmshomemenumanudata;
			
			if (Tools::isSubmit('submitAdd'.$this->table))
			{

				$callmepleasecommentsdata = new callmepleasecommentsdata();
				$callmepleasecommentsdata->customer_phone = $customer_phone;
				$callmepleasecommentsdata->session_id = $session_id;
				$callmepleasecommentsdata->ip = $ip;
				$callmepleasecommentsdata->comment = $comment;
				if(!empty($comment_ID)) {
					$callmepleasecommentsdata->comment_ID = $comment_ID;
					$callmepleasecommentsdata->id = $comment_ID;
				}
				$result = $callmepleasecommentsdata->save();
				
				if (!$result){
					// die("aqui entra con errores");
					$this->errors[] = Tools::displayError('An error has occurred: Can\'t add/update the current object/s');
				}
				
			}
			elseif (Tools::isSubmit('delete'.$this->table)){
				
				$callmepleasecommentsdata = new callmepleasecommentsdata();
				
				
				$callmepleasecommentsdata->comment_ID = $comment_ID;
				$callmepleasecommentsdata->id = $comment_ID;
				
				$result = $callmepleasecommentsdata->delete();
				
				if (!$result){
					// die("aqui entra con errores");
					$this->errors[] = Tools::displayError('An error has occurred: Can\'t delete the current object');
				}
			
			}
			elseif (Tools::isSubmit('submitBulkdelete'.$this->table)){ 
				// submitBulkdeletecallme_please_comments
				$result = true;
				$callmepleasecommentsdata = new callmepleasecommentsdata();
				$idArrayToDelete = Tools::getValue($this->table.'Box');
				// die(var_dump($idArrayToDelete));
				foreach ($idArrayToDelete as $key => $idToDelete){
					// echo "entra<br/>";
					// die(var_dump($CatalogByDestinyPriceRulesData->id));
					$callmepleasecommentsdata->id = $idToDelete;
					$result = $result && $callmepleasecommentsdata->delete();
				}
				if (!$result){
					// die("aqui entra con errores");
					$this->errors[] = Tools::displayError('An error has occurred: Can\'t delete the current object(s)');
				}
				
			}
	
			if (isset($result) && ($result == true)){ // funcionamiento correcto
				Tools::redirectAdmin(self::$currentIndex.'&token='.$this->token);
			}
		}
		
	}
?>