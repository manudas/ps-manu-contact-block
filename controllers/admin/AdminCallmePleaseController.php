<?php
class AdminCallmePleaseController extends ModuleAdminController {
	public static $_opciones_baneo = array (
			/*
			 * ban_method:  null -> no ban;
				s -> session id; 
				i -> ip; 
			*/
			"Sin baneo" => 'n',
			"Ban session" => 's',
			"Ban IP" => 'i' 
	);
	public static $_opciones_status = array (
				/* inquiry_status:
				 u -> unattended;
				 p -> in progress (being attended right now);
				 a -> already attended;
				 * max session id size: 40 chars
				 */
			"No atendido" => 'u',
			"En progreso" => 'p',
			"Atendido" => 'a' 
	);
	public function __construct() {
		$this->bootstrap = true;
		
		// $this->addRowAction('edit');
		// $this->addRowAction('duplicate');
		// $this->addRowAction('delete');
		
		$this->addRowAction ( 'edit' ); // add an edit button
		$this->addRowAction ( 'delete' ); // add a delete button
		
		$this->bulk_actions = array (
				'delete' => array (
						'text' => $this->l ( 'Delete selected' ),
						'confirm' => $this->l ( 'Delete selected items?' ) 
				) 
		);
		
		// $this->colorOnBackground = true;
		// ponemos las acciones en renderlist
		// $this->addRowAction('edit'); //add an edit button
		// $this->addRowAction('delete'); //add a delete button
		// $this->bulk_actions = array('delete' => array('text' => $this->l('Delete selected'), 'confirm' => $this->l('Delete selected items?')));
		$this->explicitSelect = true;
		$this->context = Context::getContext ();
		$this->id_lang = $this->context->language->id;
		
		$this->default_form_language = $this->context->language->id;
		$this->table = 'callme_please'; // define the main table: auto aliased to a
		$this->className = 'callmepleasedata'; // define the module entity. name de la clase q contiene la definition de base de datos
		$this->identifier = "inquiry_ID"; // the primary key
		                                  // die(var_dump($this->id));
		                                  // then define select part of the query
		$langID = $this->context->language->id;
		
		// MIRAR COMO HACER EL CAMPO BANEO, TAL VEZ CON UN SELECT EXPLICITO DEL TIPO (CASE null NO, CASE ... ) as BANEO
		
		// $this->_select = 'a.ID_RATE,a.NAME';
		
		$this->_select = 'CASE IFNULL(cmpd.ban_method, "sin") 
										when "n" then "Sin baneo"
										when "s" then "Ban session"
										when "i" then "Ban IP"
									END as BANEO,
						  CASE IFNULL(a.inquiry_status, "p") 
										when "u" then "Pendiente"
										when "p" then "En progreso"
										when "a" then "Ya atendido"
									END as STATUS,
						  IF (a.attended_by IS NULL, "---", CONCAT(e.firstname, " ", e.lastname)) as empleado';
		
		/*
		 * al.name
		 * ';
		 */
		// join to an existing table if you need some extra informations
		
		// a is an auto alias of callme_please table generated by prestashop
		$this->_join = '
				INNER JOIN `' . _DB_PREFIX_ . 'callme_please_data` cmpd ON (cmpd.`id_data` = a.`id_data`)
				LEFT JOIN `' . _DB_PREFIX_ . 'employee` e ON (e.`id_employee` = a.`attended_by`)';
		/*
		 * INNER JOIN `'._DB_PREFIX_.'category_lang` cat ON (cat.`id_category` = a.`ID_CATEGORY`)
		 * INNER JOIN `'._DB_PREFIX_.'country_lang` cl ON (city.`ID_COUNTRY` = cl.`id_country`)
		 * INNER JOIN `'._DB_PREFIX_.'state` s ON (s.`id_state` = city.`ID_STATE`)
		 * ';
		 */
		/*
		 * $this->_where = '
		 * AND cl.`id_lang` ="'. $langID.'" AND cat.`id_lang` ="'. $langID.'"';
		 * //and define the field to display in the admin table
		 */
		
		parent::__construct ();
	}
	private function initList() {
		
		/*
		 * id_menu INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
		 * name VARCHAR(50) NOT NULL,
		 * url VARCHAR(350) NOT NULL,
		 */
		$this->fields_list = array (
				'inquiry_ID' => array (
						'title' => $this->l ( 'Id solicitud' ),
						// 'width' => '5',
						'type' => 'text',
						'filter_key' => 'a!inquiry_ID' 
				),
				'customer_name' => array (
						'title' => $this->l ( 'Nombre' ),
						// 'width' => '14',
						'type' => 'text',
						'filter_key' => 'a!customer_name' 
				),
				'customer_phone' => array (
						'title' => $this->l ( 'Phone' ),
						// 'width' => '14',
						'type' => 'text',
						'filter_key' => 'a!customer_phone' 
				),
				'customer_country' => array (
						'title' => $this->l ( 'Country' ),
						// 'width' => '14',
						'type' => 'text',
						'filter_key' => 'a!customer_country' 
				),
				'STATUS' => array (
						'title' => $this->l ( 'Estado actual' ),
						// 'width' => '14',
						'type' => 'text'
				),
				'BANEO' => array (
						'title' => $this->l ( 'Baneo' ),
						// 'width' => '14',
						'type' => 'text' 
				)
				// 'filter_key' => 'BANEO'
				,
				'ip' => array (
						'title' => $this->l ( 'IP' ),
						// 'width' => '14',
						'type' => 'text',
						'filter_key' => 'cmpd!ip' 
				),
				'session_id' => array (
						'title' => $this->l ( 'Session ID' ),
						// 'width' => '14',
						'type' => 'text',
						'filter_key' => 'cmpd!session_id' 
				),
				'empleado' => array (
						'title' => $this->l ( 'Empleado' ),
						// 'width' => '14',
						'type' => 'text'
				)
		);
		
		/*
		 * $helper = new HelperList();
		 *
		 * $helper->shopLinkType = '';
		 *
		 * // $helper->simple_header = true;
		 *
		 * // Actions to be displayed in the "Actions" column
		 * $helper->actions = array('edit', 'delete', 'view');
		 *
		 * $helper->identifier = 'id_menu';
		 * $helper->show_toolbar = true;
		 * $helper->title = 'CMS Menu Link';
		 * $helper->table = _DB_PREFIX_.'cmshomemenumanu';
		 *
		 * $helper->simple_header = false;
		 *
		 * $helper->token = Tools::getAdminTokenLite('AdminModules');
		 * $helper->currentIndex = AdminController::$currentIndex.'&configure='.$this->name;
		 * return $helper;
		 */
	}
	public function renderList() {
		$this->initList ();
		if (Tools::isSubmit ( $this->table . "Orderby" )) {
			$this->_orderBy = Tools::getValue ( $this->table . "Orderby" );
			$this->_orderWay = Tools::getValue ( $this->table . "Orderway" );
			
			/* CODIGO ESPECIAL PARA MANEJAR ORDENACION SEGUN EL CASO DE BANEO */
			if ($this->_orderBy == 'BANEO') {
				$this->_orderBy = 'cmpd.ban_method';
			}
			/* FIN DE CODIGO ESPECIAL PARA MANEJAR ORDENACION SEGUN EL CASO DE BANEO */
			
			/* CODIGO ESPECIAL PARA MANEJAR ORDENACION SEGUN EL CASO DEL STATUS */
			if ($this->_orderBy == 'STATUS') {
				$this->_orderBy = 'a.inquiry_status';
			}
			/* FIN DE CODIGO ESPECIAL PARA MANEJAR ORDENACION SEGUN EL CASO DEL STATUS */
		}
		
		if (Tools::isSubmit ( 'submitFilter' )) {
			// die($_REQUEST['callme_pleaseFilter_cmpd!ip']);
			$whereAdition = '';
			foreach ( $this->fields_list as $field => $t ) {
				if (isset ( $t ['filter_key'] ))
					$field = $t ['filter_key'];
				if ($val = Tools::getValue ( $this->table . 'Filter_' . $field )) {
					
					/* CODIGO ESPECIAL PARA MANEJAR EL CASO DE BANEO */
					if ($field == 'BANEO') {
						$field = 'cmpd.ban_method';
						if ((strpos ( strtolower ( $val ), 'sin' ) !== false) || (strpos ( strtolower ( $val ), 'no' ) !== false)) { // se buscan no baneados
							$val = 'n';
						} else if ((strpos ( strtolower ( $val ), 'se' ) !== false)) { // se buscan baneados por sesin
							$val = 's';
						} else if ((strpos ( strtolower ( $val ), 'ip' ) !== false)) { // se buscan baneados por ip
							$val = 'i';
						}
					}
					/* FIN DE CODIGO ESPECIAL PARA MANEJAR EL CASO DE BANEO */
					
					/* CODIGO ESPECIAL PARA MANEJAR EL CASO DEL STATUS */
					if ($field == 'STATUS') {
						$field = 'a.inquiry_status';
						if ((strpos ( strtolower ( $val ), 'pen' ) !== false) || (strpos ( strtolower ( $val ), 'no' ) !== false)) { // se buscan no atendidos
							$val = 'u';
						} else if ((strpos ( strtolower ( $val ), 'pro' ) !== false)) { // se buscan solicitudes en progreso
							$val = 'p';
						} else if ((strpos ( strtolower ( $val ), 'at' ) !== false)) { // se buscan solicitudes ya atendidas
							$val = 'a';
						}
					}
					/* FIN DE CODIGO ESPECIAL PARA MANEJAR EL CASO DEL STATUS */
					
					if (! is_array ( $val ) && ! empty ( $val )) {
						$replacedCharField = str_replace ( '!', '.', $field );
						$whereAdition .= $whereAdition ? " AND LOWER(" . $replacedCharField . ") like LOWER('%" . $val . "%')" : " LOWER(" . $replacedCharField . ") like LOWER('%" . $val . "%')";
						// $whereAdition .= $whereAdition ? " AND `".$field."` like '%".$val."%'" : " `".$field."` like '%".$val."%'";
					} elseif (is_array ( $val ) && ! empty ( $val )) {
						$tmp = '';
						$replacedCharField = str_replace ( '!', '.', $field );
						if ((count ( $val ) == 2) && ! empty ( $val [0] ) && ! empty ( $val [1] )) { // ¿Filtro es entre dos fechas ?
							$tmp = " " . $replacedCharField . " BETWEEN '" . $val [0] . "' AND '" . $val [1] . "'";
							// $tmp = " `".$field."` BETWEEN '".$val[0]."' AND '".$val[1]."'";
						} else { // ¿otro tipo de filtro ?
							foreach ( $val as $v )
								if (! empty ( $v ))
									$tmp .= $tmp ? " OR " . $replacedCharField . " like '%" . $v . "%'" : " " . $replacedCharField . " like '%" . $v . "%'";
							// $tmp .= $tmp ? " OR `".$field."` like '%".$v."%'" : " `".$field."` like '%".$v."%'";
						}
						if (Tools::strlen ( $tmp )) {
							
							$tmp = $whereAdition ? " AND (" . $tmp . ")" : "(" . $tmp . ")";
							$whereAdition .= $tmp;
						}
					}
				}
			}
			
			$this->_where .= $whereAdition ? " AND " . $whereAdition : "";
		}
		// return;
		return parent::renderList ();
	}
	public function renderForm() {
		
		/*
		$employee_data = Employee::getEmployees();
		for($i = 0; $i < count ( $employee_data ); $i ++) {
			$name = $employee_data [$i]['firstname'].' '.$employee_data [$i]['lastname'];
			$value = $employee_data [$i]['id_employee'];
			$arrayOpcionesEmployee [$i] = array (
					'id_option' => $value,
					'name_option' => $name
			);
		}
		*/
		
		$arrayOpcionesBaneo = array ();
		/*
		 * array(
		 * array(
		 * 'id_option' => 1, // The value of the 'value' attribute of the <option> tag.
		 * 'name' => 'Method 1'// The value of the text content of the <option> tag.
		 * ),
		 * array(
		 * 'id_option' => 2,
		 * 'name' => 'Method 2'
		 * ),
		 * );
		 */
		$keys_baneos = array_keys ( AdminCallmePleaseController::$_opciones_baneo );
		for($i = 0; $i < count ( $keys_baneos ); $i ++) {
			$name = $keys_baneos [$i];
			$value = AdminCallmePleaseController::$_opciones_baneo [$keys_baneos[$i]];
			$arrayOpcionesBaneo [$i] = array (
					'id_option' => $value,
					'name_option' => $name 
			);
		}
		
		$arrayOpcionesStauts = array ();
		$keys_status = array_keys ( AdminCallmePleaseController::$_opciones_status );
		for($i = 0; $i < count ( $keys_status ); $i ++) {
			$name = $keys_status [$i];
			$value = AdminCallmePleaseController::$_opciones_status [$keys_status[$i]];
			$arrayOpcionesStauts [$i] = array (
					'id_option' => $value,
					'name_option' => $name 
			);
		}
		
		$is_update = Tools::isSubmit ( 'updatecallme_please' );
		if ($is_update) {
			$readonly = true;
		}
		else {
			$readonly = false;
		}
		
		
		$this->fields_form = array (
				
				'legend' => array (
						
						'title' => $this->l ( 'Detalles de cliente' ),
						
						'icon' => 'icon-cogs' 
				)
				,
				
				'description' => $this->l ( 'Aquí verá los detalles del cliente y si llamó otras veces. También podrá configurar si desea bloquearlo y como hacerlo' ) . '<br/><br/>',
				
				'input' => array (
						
						array (
								
								'type' => 'text',
								
								'label' => $this->l ( 'Nombre del cliente' ),
								
								'name' => 'customer_name',
								
								'desc' => $this->l ( 'Este es el nombre que el cliente introdujo' ) 
						)
						,
						
						array (
								
								'type' => 'text',
								
								'label' => $this->l ( 'IP' ),
								
								'name' => 'ip',
								
								'desc' => $this->l ( 'La ip desde que se hizo esta solicitud' ),
								
								'readonly' => $readonly 
						)
						,
						
						array (
								
								'type' => 'text',
								
								'label' => $this->l ( 'Session' ),
								
								'name' => 'session_id',
								
								// 'desc' => $this->l('La sesin capturada al usuario'),
								'desc' => $this->l ( 'La sesion identifica unequivocamente al usuario mientras este no cambie de navegador o limpie cookies' ),
								
								'readonly' => $readonly 
						)
						,
						array (
								
								'type' => 'text',
								
								'label' => $this->l ( 'Phone' ),
								
								'name' => 'customer_phone',
								
								'desc' => $this->l ( 'Telefono para el que se solicita la llamada' ) 
						)
						,
						array (
								
								'type' => 'text',
								
								'label' => $this->l ( 'Country' ),
								
								'name' => 'customer_country',
								
								'desc' => $this->l ( 'Country where the customer wants to be called' ) 
						)
						,
						array (
						
								'type' => 'text',
						
								'label' => $this->l ( 'URL' ),
						
								'name' => 'origin_url',
						
								'desc' => $this->l ( 'La direccion URL de la que procede esta peticion' ),
								
								'readonly' => $readonly
						)
						,
						array (
								
								'type' => 'select',
								
								'label' => $this->l ( 'Prohibir uso?' ),
								
								'name' => 'ban_method',
								
								'desc' => $this->l ( 'Seleccione si considera que hay que prohibir el uso al usuario y como desea hacerlo' ),
								
								// 'name' => 'select_baneo',
								
								'options' => array (
										'query' => $arrayOpcionesBaneo,
										'id' => 'id_option', /* el segundo id identifica el indice que almacena el value del option. el primero es el indice de id en el primer array */																
										'name' => 'name_option' 
								) 
						),
						array (
								
								'type' => 'select',
								
								'label' => $this->l ( 'Modificar estado?' ),
								
								'name' => 'inquiry_status',
								
								'desc' => $this->l ( 'Puede modificar el estado actual de la solicitud' ),
								
								// 'name' => 'select_baneo',
								
								'options' => array (
										'query' => $arrayOpcionesStauts,
										'id' => 'id_option', /* el segundo id identifica el indice que almacena el value del option. el primero es el indice de id en el primer array */
										'name' => 'name_option' 
								) 
						),
						array (
						
								'type' => 'text',
						
								'label' => $this->l ( 'Atendido por?' ),
						
								'name' => 'attended_by',
						
								'desc' => $this->l ( 'Seleccione el usuario que ha atendido o va a atender esta solicitud' ),
						/*
								'options' => array (
										'query' => $arrayOpcionesEmployee,
										'id' => 'id_option', /* el segundo id identifica el indice que almacena el value del option. el primero es el indice de id en el primer array */
										/*
										'name' => 'name_option'
								)
						
						*/
						)
				),
				
				'submit' => array (
						
						'title' => $this->l ( 'Save' ) 
				) 
		)
		// ),
		;
		
		
		
		$this->fields_form ['submit'] = array (
				'title' => $this->l ( 'Guardar' ),
				'class' => 'button' 
		);
		
		if (! ($MyModuleObject = $this->loadObject ( true )))
			return;
			// populate the field with good values if we are in an edition
		foreach ( $this->fields_form ["input"] as $inputfield ) {
			if (! empty ( $MyModuleObject->{$inputfield ["name"]} )) {
				$this->fields_value [$inputfield ["name"]] = $MyModuleObject->{$inputfield ["name"]};
			}
		}
		
		$callmepleasedata_data = new callmepleasedata_data ( $MyModuleObject->id_data );
		foreach ( $this->fields_form ["input"] as $inputfield ) {
			if (isset ( $callmepleasedata_data->{$inputfield ["name"]} )) {
				$this->fields_value [$inputfield ["name"]] = $callmepleasedata_data->{$inputfield ["name"]};
			}
		}
		
		$form = parent::renderForm ();
		
		return $form;
	}
	public function postProcess() {
		// echo "<h1>postproces va mal: usa cmshomemenudata</h1>";
		
		$blockcontactmanu = Module::getInstanceByName ( 'blockcontactmanu' );
		
		
		$inquiry_ID = Tools::getValue ( 'inquiry_ID' );
		
		$customer_name = Tools::getValue ( 'customer_name' );
		
		$ip = Tools::getValue ( 'ip' );
		
		if (empty($ip)) {
			//  si está vacío asumimos que ha sido rellenado desde el formulario sin meter este dato: metemos el del admin que lo insertó
			$ip = $blockcontactmanu -> get_client_ip();
		}
		
		$session_id = Tools::getValue ( 'session_id' );
		
		if (empty($session_id)) {
			//  si está vacío asumimos que ha sido rellenado desde el formulario sin meter este dato: metemos el del admin que lo insertó
			session_start();
			$session_id = session_id();
		}
		
		$customer_phone = Tools::getValue ( 'customer_phone' );
		
		$customer_country = Tools::getValue ( 'customer_country' );
		
		$ban_method = Tools::getValue ( 'ban_method' );
		
		$attended_by = Tools::getValue ( 'attended_by' );
		
		$inquiry_status = Tools::getValue ( 'inquiry_status' );
		
		$origin_url = Tools::getValue ( 'origin_url' );
		
		// se puede usar el parmetro updatecallme_please para detectar que se est actualizando, aunque tambin se puede usar la existencia o no de $inquiry_ID
		
		
		if (Tools::isSubmit ( 'submitAdd' . $this->table )) {
			if (!empty($inquiry_ID)){
				$callmepleasedata = new callmepleasedata ($inquiry_ID);
			}
			else {
				$callmepleasedata = new callmepleasedata ();
			}
			
			
			if (!empty($callmepleasedata->id_data)){
				$callmepleasedata_data = new callmepleasedata_data ($callmepleasedata->id_data);
			}
			else {
				$callmepleasedata_data = new callmepleasedata_data ();
			}
			
			
			$callmepleasedata_data->ip = $ip;
			$callmepleasedata_data->session_id = $session_id;
			$callmepleasedata_data->ban_method = $ban_method;
			$result = $callmepleasedata_data->save();
			$callmepleasedata_data->id_data = $callmepleasedata_data->id;
			
			
			
			$callmepleasedata->customer_name = $customer_name;
			$callmepleasedata->customer_phone = $customer_phone;
			$callmepleasedata->customer_country = $customer_country;
			$callmepleasedata->inquiry_status = $inquiry_status;
			$callmepleasedata->attended_by = $attended_by;
			$callmepleasedata->origin_url = $origin_url;
			$callmepleasedata->id_data = $callmepleasedata_data->id_data;
			$result &= $callmepleasedata->save();
			
			
			
			if (! $result) {
				// die("aqui entra con errores");
				$this->errors [] = Tools::displayError ( 'An error has occurred: Can\'t add/update the current object/s' );
			} 
		} elseif (Tools::isSubmit ( 'delete' . $this->table )) {
			
			$callmepleasedata = new callmepleasedata ($inquiry_ID);
			
			$id_data = $callmepleasedata->id_data;
			
			$result = $callmepleasedata->delete ();
			
			$callmepleasedata_data_collection = new PrestashopCollection('callmepleasedata_data');
			
			
			$callmepleasedata_collection->where('id_data' , '=', $id_data);
			$data = $callmepleasedata_collection->getResults();
			if (count($data) == 1) { // solo hay un resultado, as que si borramos la solicitud borramos sus datos asociados
				$result &= $data->delete();
				
			}
			
			if (! $result) {
				// die("aqui entra con errores");
				$this->errors [] = Tools::displayError ( 'An error has occurred: Can\'t delete the current object' );
			} 
		} elseif (Tools::isSubmit ( 'submitBulkdelete' . $this->table )) {
			$result = true;
			$idArrayToDelete = Tools::getValue ( $this->table . 'Box' );
			// die(var_dump($idArrayToDelete));
			foreach ( $idArrayToDelete as $key => $idToDelete ) {

				$callmepleasedata = new callmepleasedata ($idToDelete);
					
				$id_data = $callmepleasedata->id_data;
					
				$result = $callmepleasedata->delete ();
					
				$callmepleasedata_data_collection = new PrestashopCollection('callmepleasedata_data');
					
					
				$callmepleasedata_collection->where('id_data' , '=', $id_data);
				$data = $callmepleasedata_collection->getResults();
				if (count($data) == 1) { // solo hay un resultado, as que si borramos la solicitud borramos sus datos asociados
					$result &= $data->delete();
				
				}
				
			}
			if (! $result) {
				// die("aqui entra con errores");
				$this->errors [] = Tools::displayError ( 'An error has occurred: Can\'t delete the current object(s)' );
			} 
		}
		
		if (isset ( $result ) && ($result == true)) { // funcionamiento correcto
			Tools::redirectAdmin ( self::$currentIndex . '&token=' . $this->token );
		}
	}
}
?>